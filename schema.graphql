type BusinessValueMetricConfig implements PerformanceMetricConfigInterface {
  metric: PerformanceMetric!
  enabled: Boolean!
  enabledEstimated: Boolean!
  enabledRealized: Boolean!
  threshold: Threshold
  truePositiveWeight: Float!
  falsePositiveWeight: Float!
  trueNegativeWeight: Float!
  falseNegativeWeight: Float!
}

interface PerformanceMetricConfigInterface {
  metric: PerformanceMetric!
  enabled: Boolean!
  enabledEstimated: Boolean!
  enabledRealized: Boolean!
  threshold: Threshold
}

enum PerformanceMetric {
  ROC_AUC
  F1
  PRECISION
  RECALL
  SPECIFICITY
  ACCURACY
  CONFUSION_MATRIX
  BUSINESS_VALUE
  MAE
  MAPE
  MSE
  RMSE
  MSLE
  RMSLE
}

interface Threshold implements ThresholdBase {
  name: String!
  id: ID!
  type: ThresholdType!
}

interface ThresholdBase {
  name: String!
}

enum ThresholdType {
  CONSTANT
  STANDARD_DEVIATION
}

type ConstantThreshold implements Thresholdbase & Threshold & ThresholdBase {
  name: String!
  id: ID!
  type: ThresholdType!
  lower: Float
  upper: Float
}

interface Thresholdbase implements Threshold & ThresholdBase {
  name: String!
  id: ID!
  type: ThresholdType!
}

type MetricConfigPerformance implements PerformanceMetricConfigInterface {
  metric: PerformanceMetric!
  enabled: Boolean!
  enabledEstimated: Boolean!
  enabledRealized: Boolean!
  threshold: Threshold
}

type StandardDeviationThreshold implements Thresholdbase & Threshold & ThresholdBase {
  name: String!
  id: ID!
  type: ThresholdType!
  stdLowerMultiplier: Float
  stdUpperMultiplier: Float
}

type ThresholdAlreadyExists implements ThresholdBase {
  name: String!
}

type Query {
  models(filter: ModelsFilter = null): [Model!]!
  model(id: Int!): Model
  inspect_dataset(input: InspectDataSourceInput!): DataSourceInspectData!
  results(modelId: ID!, analysisType: AnalysisType = null, metricNames: [String!] = null, componentNames: [String!] = null, columnNames: [String!] = null, tags: [String!] = null, includeDisabled: Boolean! = false): [TimeSeriesResult!]!
  thresholds: [Threshold!]!
  current_user: User!
  tags(names: [String!] = null): [Tag!]!
  application_settings: ApplicationSettings
}

type Model {
  id: ID!
  name: String!
  problemType: ProblemType!
  createdAt: DateTime!
  latestRun: Run
  nextRun: Run
  referenceStartTimestamp: DateTime
  referenceEndTimestamp: DateTime
  dataSources(filter: DataSourcesFilter = null): [DataSource!]!
  runs: [Run!]!
  results(analysisType: AnalysisType = null, metricNames: [String!] = null, componentNames: [String!] = null, columnNames: [String!] = null, tags: [String!] = null, includeDisabled: Boolean! = false): [TimeSeriesResult!]!
  runtimeConfig: RuntimeConfig!
  runnerConfig: JSON!
  schedules: [Schedule!]!
  keyIndicators: [KeyIndicator!]!
  nrPerformanceAlerts: Int!
  nrTargetDriftAlerts: Int
  nrModelOutputDriftAlerts: Int!
  nrOtherDriftAlerts: Int!
}

enum ProblemType {
  BINARY_CLASSIFICATION
  MULTICLASS_CLASSIFICATION
  REGRESSION
}

"""Date with time (isoformat)"""
scalar DateTime

type Run {
  id: ID!
  state: RunState!
  scheduledFor: DateTime
  startedAt: DateTime
  completedAt: DateTime
  log: String
  ranSuccessfully: Boolean
  events(eventType: RunEventType = null): [RunEvent!]!
}

enum RunState {
  SCHEDULED
  RUNNING
  CANCELLING
  COMPLETED
}

type RunEvent {
  eventType: RunEventType!
  calculator: CalculatorType
  ranSuccessfully: Boolean
  scheduledFor: DateTime
  currentStep: Int
  nrSteps: Int
  description: String
  timestamp: DateTime!
  causedBy: User
}

enum RunEventType {
  SCHEDULED
  STARTED
  COMPLETED
  CANCELLED
  PROGRESS
  WARNING
  ERROR
  TIMEOUT
}

enum CalculatorType {
  CBPE
  DLE
  PERFORMANCE_CALCULATION
  UNIVARIATE_DRIFT
  MULTIVARIATE_DRIFT
  MISSING_VALUES
  UNSEEN_VALUES
  RCS
}

type User {
  id: ID!
  businessKey: String!
  email: String
  firstName: String
  familyName: String
  name: String
  notificationSettings: UserNotificationSettings!
  apiTokens: [UserApiToken!]!
}

type UserNotificationSettings {
  emailEnabled: Boolean!
  emailRecipient: String
}

type UserApiToken {
  id: ID!
  createdAt: DateTime!
  description: String
}

type DataSource {
  id: ID!
  name: String!
  hasReferenceData: Boolean!
  hasAnalysisData: Boolean!
  columns: [Column!]!
  nrRows: Int
  events(filter: DataSourceEventsFilter = null): [DataSourceEvent!]!
}

type Column {
  name: String!
  columnType: ColumnType!
  dataType: String!
  className: String
}

enum ColumnType {
  TARGET
  PREDICTION_SCORE
  PREDICTION
  TIMESTAMP
  CATEGORICAL_FEATURE
  CONTINUOUS_FEATURE
  IGNORED
  IDENTIFIER
}

type DataSourceEvent {
  id: ID!
  eventType: DataSourceEventType!
  timestamp: DateTime!
  causedBy: User!
  nrRows: Int
}

enum DataSourceEventType {
  CREATED
  DATA_ADDED
  DATA_REMOVED
  DATA_UPDATED
}

input DataSourceEventsFilter {
  eventType: DataSourceEventType = null
  causedByUserId: ID = null
}

input DataSourcesFilter {
  name: String = null
  hasReferenceData: Boolean = null
  hasAnalysisData: Boolean = null
}

type TimeSeriesResult {
  analysisType: AnalysisType!
  metricName: String!
  componentName: String
  columnName: String
  columnNames: [String!]
  lowerThreshold: Float
  upperThreshold: Float
  tags: [String!]!
  testData: [TimeSeriesDataPoint!]!
  analysisData: [TimeSeriesDataPoint!]!
  lastDataPoint: TimeSeriesDataPoint
  nrAlerts: Int!
}

enum AnalysisType {
  REALIZED_PERFORMANCE
  ESTIMATED_PERFORMANCE
  FEATURE_DRIFT
  DATA_QUALITY
  CONCEPT_SHIFT
}

type TimeSeriesDataPoint {
  value: Float!
  hasAlert: Boolean!
  startTimestamp: DateTime!
  endTimestamp: DateTime!
  nrDataPoints: Int!
  samplingError: Float
  lowerConfidenceBound: Float
  upperConfidenceBound: Float
}

type RuntimeConfig {
  dataChunking: [ChunkingConfig!]!
  performanceTypes: [PerformanceTypeConfig!]!
  performanceMetrics: [PerformanceMetricConfigInterface!]!
  univariateDriftMethods: [UnivariateDriftMethodConfig!]!
  multivariateDriftMethods: [MultivariateDriftMethodConfig!]!
  dataQualityMetrics: [DataQualityMetricConfig!]!
  conceptShiftMetrics: [ConceptShiftMetricConfig!]!
}

type ChunkingConfig {
  chunking: Chunking!
  enabled: Boolean!
  count: Int
}

enum Chunking {
  YEARLY
  QUARTERLY
  MONTHLY
  WEEKLY
  DAILY
  HOURLY
}

type PerformanceTypeConfig {
  type: PerformanceType!
  enabled: Boolean!
}

enum PerformanceType {
  ESTIMATED
  REALIZED
}

type UnivariateDriftMethodConfig {
  method: UnivariateDriftMethod!
  enabled: Boolean!
  enabledCategorical: Boolean!
  enabledContinuous: Boolean!
  threshold: Threshold
}

enum UnivariateDriftMethod {
  KOLMOGOROV_SMIRNOV
  JENSEN_SHANNON
  WASSERSTEIN
  HELLINGER
  L_INFINITY
  CHI2
}

type MultivariateDriftMethodConfig {
  method: MultivariateDriftMethod!
  enabled: Boolean!
  threshold: Threshold
}

enum MultivariateDriftMethod {
  PCA_RECONSTRUCTION_ERROR
}

type DataQualityMetricConfig {
  metric: DataQualityMetric!
  enabled: Boolean!
  normalize: Boolean!
  threshold: Threshold
}

enum DataQualityMetric {
  MISSING_VALUES
  UNSEEN_VALUES
}

type ConceptShiftMetricConfig {
  metric: ConceptShiftMetric!
  enabled: Boolean!
  threshold: Threshold
}

enum ConceptShiftMetric {
  ROC_AUC
  F1
  PRECISION
  RECALL
  SPECIFICITY
  ACCURACY
  MAGNITUDE
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Schedule {
  frequency: ScheduleFrequency!
  multiplier: Int!
  offsetDays: Int
  time: Time!
  dayOfWeek: DayOfWeek
}

enum ScheduleFrequency {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

"""Time (isoformat)"""
scalar Time

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

type KeyIndicator {
  analysisType: AnalysisType!
  metricName: String!
  componentName: String
  columnName: String
  columnNames: [String!]
  value: Float
  change: ChangeDirection
}

enum ChangeDirection {
  INCREASE
  DECREASE
  UNCHANGED
}

input ModelsFilter {
  name: String = null
  problemType: ProblemType = null
}

type DataSourceInspectData {
  columns: [Column!]!
  head: JSON!
}

input InspectDataSourceInput {
  problemType: ProblemType!
  storageInfo: StorageInput!
}

input StorageInput {
  raw: RawStorageInput = null
  azureBlob: AzureBlobStorageInput = null
  s3: S3StorageInput = null
  cache: CacheStorageInput = null
}

input RawStorageInput {
  connectionString: String!
  options: JSON = null
}

input AzureBlobStorageInput {
  accountName: String!
  container: String!
  path: String!
  isPublic: Boolean! = false
  accountKey: String = null
  sasToken: String = null
}

input S3StorageInput {
  uri: String!
  authenticationMode: S3AuthenticationMode!
  awsAccessKeyId: String = null
  awsSecretAccessKey: String = null
}

enum S3AuthenticationMode {
  ANONYMOUS
  INTEGRATED
  ACCESS_KEY
}

input CacheStorageInput {
  id: String!
}

type Tag {
  name: String!
}

type ApplicationSettings {
  usageStatistics: Boolean!
}

type Mutation {
  create_model(model: CreateModelInput!): Model!
  delete_model(modelId: Int!): Model!
  start_model_run(modelId: Int!): Run!
  stop_model_run(modelId: Int!): Run!
  edit_model(input: EditModelInput!): ModelResultInvalidationRequired!
  create_threshold(input: CreateThresholdInput!): ThresholdBase!
  create_tag(input: CreateTagInput!): TagTagAlreadyExists!
  edit_tag(input: EditTagInput!): TagTagAlreadyExistsTagNotFound!
  tag_result(input: TagResultInput!): TagTagNotFoundResultNotFoundTagAlreadyExists!
  untag_result(input: TagResultInput!): TagTagNotFoundResultNotFound!
  add_model_data_source(input: AddDataSourceToModelInput!): DataSource!
  delete_data_source(input: DeleteDataSourceInput!): DataSource!
  add_data_to_data_source(input: DataSourceDataInput!): DataSource!
  upsert_data_in_data_source(input: DataSourceDataInput!): DataSource!
  delete_data_from_data_source(input: DataSourceDeleteInput!): DataSource!
  edit_user_notification_settings(settings: EditUserNotificationSettingsInput!): UserNotificationSettingsUserNotFound!
  edit_application_settings(settings: EditApplicationSettingsInput!): ApplicationSettings!
  upload_dataset(file: Upload!): DatasetCacheRef!
  create_user_api_token(input: UserApiTokenCreateInput!): UserApiTokenCreateResponse!
  delete_user_api_token(tokenId: ID!): UserApiTokenTokenNotFound!
}

input CreateModelInput {
  name: String!
  problemType: ProblemType!
  chunkAggregation: Chunking!
  referenceStartTimestamp: DateTime = null
  referenceEndTimestamp: DateTime = null
  dataSources: [CreateDataSourceInput!]! = []
  mainPerformanceMetric: PerformanceMetric = null
  mainPerformanceComponent: String = null
}

input CreateDataSourceInput {
  name: String!
  hasReferenceData: Boolean!
  hasAnalysisData: Boolean!
  columns: [ColumnInput!]!
  storageInfo: StorageInput
}

input ColumnInput {
  name: String!
  columnType: ColumnType!
  dataType: String!
  className: String = null
}

union ModelResultInvalidationRequired = Model | ResultInvalidationRequired

type ResultInvalidationRequired {
  modelId: ID!
  all: Boolean!
  metrics: [ResultRef!]!
}

type ResultRef {
  analysisType: AnalysisType!
  metricName: String!
  componentName: String
  columnName: String
  columnNames: [String!]
}

input EditModelInput {
  modelId: ID!
  allowInvalidatingResults: Boolean! = false
  name: String = null
  referenceStartTimestamp: DateTime = null
  referenceEndTimestamp: DateTime = null
  runtimeConfig: EditRuntimeConfigInput = null
  schedules: [EditScheduleInput!] = null
}

input EditRuntimeConfigInput {
  dataChunking: [ChunkingConfigInput!] = null
  performanceTypes: [PerformanceTypeConfigInput!] = null
  performanceMetrics: [PerformanceMetricConfigInput!] = null
  univariateDriftMethods: [UnivariateDriftMethodConfigInput!] = null
  multivariateDriftMethods: [MultivariateDriftMethodConfigInput!] = null
  dataQualityMetrics: [DataQualityMetricConfigInput!] = null
  conceptShiftMetrics: [ConceptShiftMetricConfigInput!] = null
}

input ChunkingConfigInput {
  chunking: Chunking!
  enabled: Boolean!
  count: Int = null
}

input PerformanceTypeConfigInput {
  type: PerformanceType!
  enabled: Boolean!
}

input PerformanceMetricConfigInput {
  metric: PerformanceMetric!
  enabled: Boolean!
  enabledEstimated: Boolean!
  enabledRealized: Boolean!
  threshold: ThresholdRefInput
  businessValue: BusinessValueMetricConfigInput = null
}

input ThresholdRefInput {
  id: ID!
}

input BusinessValueMetricConfigInput {
  truePositiveWeight: Float!
  falsePositiveWeight: Float!
  trueNegativeWeight: Float!
  falseNegativeWeight: Float!
}

input UnivariateDriftMethodConfigInput {
  method: UnivariateDriftMethod!
  enabled: Boolean!
  enabledCategorical: Boolean!
  enabledContinuous: Boolean!
  threshold: ThresholdRefInput
}

input MultivariateDriftMethodConfigInput {
  method: MultivariateDriftMethod!
  enabled: Boolean!
  threshold: ThresholdRefInput
}

input DataQualityMetricConfigInput {
  metric: DataQualityMetric!
  enabled: Boolean!
  normalize: Boolean!
  threshold: ThresholdRefInput
}

input ConceptShiftMetricConfigInput {
  metric: ConceptShiftMetric!
  enabled: Boolean!
  threshold: ThresholdRefInput
}

input EditScheduleInput {
  frequency: ScheduleFrequency!
  multiplier: Int!
  time: Time!
  offsetDays: Int = null
  dayOfWeek: DayOfWeek = null
}

input CreateThresholdInput {
  name: String!
  constant: ConstantThresholdInput = null
  standardDeviation: StandardDeviationThresholdInput = null
}

input ConstantThresholdInput {
  lower: Float
  upper: Float
}

input StandardDeviationThresholdInput {
  stdLowerMultiplier: Float
  stdUpperMultiplier: Float
}

union TagTagAlreadyExists = Tag | TagAlreadyExists

type TagAlreadyExists {
  name: String!
}

input CreateTagInput {
  name: String!
}

union TagTagAlreadyExistsTagNotFound = Tag | TagAlreadyExists | TagNotFound

type TagNotFound {
  name: String!
}

input EditTagInput {
  originalName: String!
  name: String!
}

union TagTagNotFoundResultNotFoundTagAlreadyExists = Tag | TagNotFound | ResultNotFound | TagAlreadyExists

type ResultNotFound {
  analysisType: AnalysisType!
  metricName: String!
  componentName: String
  columnName: String
  columnNames: [String!]
  modelId: Int!
}

input TagResultInput {
  analysisType: AnalysisType!
  metricName: String!
  componentName: String = null
  columnName: String = null
  columnNames: [String!] = null
  modelId: Int!
  tagName: String!
}

union TagTagNotFoundResultNotFound = Tag | TagNotFound | ResultNotFound

input AddDataSourceToModelInput {
  modelId: ID!
  dataSource: CreateDataSourceInput!
}

input DeleteDataSourceInput {
  id: ID!
}

input DataSourceDataInput {
  id: ID!
  storageInfo: StorageInput!
}

input DataSourceDeleteInput {
  id: ID!
  dataIds: StorageInput!
}

union UserNotificationSettingsUserNotFound = UserNotificationSettings | UserNotFound

type UserNotFound {
  id: ID!
}

input EditUserNotificationSettingsInput {
  userId: ID = null
  emailEnabled: Boolean!
  emailRecipient: String = null
}

input EditApplicationSettingsInput {
  usageStatistics: Boolean!
}

type DatasetCacheRef {
  id: String!
}

scalar Upload

type UserApiTokenCreateResponse {
  id: ID!
  createdAt: DateTime!
  description: String
  token: String!
}

input UserApiTokenCreateInput {
  description: String = null
}

union UserApiTokenTokenNotFound = UserApiToken | TokenNotFound

type TokenNotFound {
  id: ID!
}
