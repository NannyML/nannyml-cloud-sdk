# Generated by ariadne-codegen on 2023-10-31 15:35
# Source: graphql/schema.graphql

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AnalysisType,
    Chunking,
    ColumnType,
    ConceptShiftMetric,
    DataQualityMetric,
    DayOfWeek,
    MultivariateDriftMethod,
    PerformanceMetric,
    PerformanceType,
    ProblemType,
    S3AuthenticationMode,
    ScheduleFrequency,
    UnivariateDriftMethod,
)


class AddDataSourceToModelInput(BaseModel):
    model_id: str = Field(alias="modelId")
    data_source: "CreateDataSourceInput" = Field(alias="dataSource")


class AzureBlobStorageInput(BaseModel):
    account_name: str = Field(alias="accountName")
    container: str
    path: str
    is_public: bool = Field(alias="isPublic", default=False)
    account_key: Optional[str] = Field(alias="accountKey", default=None)
    sas_token: Optional[str] = Field(alias="sasToken", default=None)


class BusinessValueMetricConfigInput(BaseModel):
    true_positive_weight: float = Field(alias="truePositiveWeight")
    false_positive_weight: float = Field(alias="falsePositiveWeight")
    true_negative_weight: float = Field(alias="trueNegativeWeight")
    false_negative_weight: float = Field(alias="falseNegativeWeight")


class CacheStorageInput(BaseModel):
    id: str


class ChunkingConfigInput(BaseModel):
    chunking: Chunking
    enabled: bool
    count: Optional[int] = None


class ColumnInput(BaseModel):
    name: str
    column_type: ColumnType = Field(alias="columnType")
    data_type: str = Field(alias="dataType")
    class_name: Optional[str] = Field(alias="className", default=None)


class ConceptShiftMetricConfigInput(BaseModel):
    metric: ConceptShiftMetric
    enabled: bool
    threshold: Optional["ThresholdRefInput"] = None


class ConstantThresholdInput(BaseModel):
    lower: Optional[float] = None
    upper: Optional[float] = None


class CreateDataSourceInput(BaseModel):
    name: str
    has_reference_data: bool = Field(alias="hasReferenceData")
    has_analysis_data: bool = Field(alias="hasAnalysisData")
    columns: List["ColumnInput"]
    storage_info: Optional["StorageInput"] = Field(alias="storageInfo", default=None)


class CreateModelInput(BaseModel):
    name: str
    problem_type: ProblemType = Field(alias="problemType")
    chunk_aggregation: Chunking = Field(alias="chunkAggregation")
    reference_start_timestamp: Optional[Any] = Field(
        alias="referenceStartTimestamp", default=None
    )
    reference_end_timestamp: Optional[Any] = Field(
        alias="referenceEndTimestamp", default=None
    )
    data_sources: List["CreateDataSourceInput"] = Field(
        alias="dataSources", default_factory=lambda: []
    )
    main_performance_metric: Optional[PerformanceMetric] = Field(
        alias="mainPerformanceMetric", default=None
    )
    main_performance_component: Optional[str] = Field(
        alias="mainPerformanceComponent", default=None
    )


class CreateTagInput(BaseModel):
    name: str


class CreateThresholdInput(BaseModel):
    name: str
    constant: Optional["ConstantThresholdInput"] = None
    standard_deviation: Optional["StandardDeviationThresholdInput"] = Field(
        alias="standardDeviation", default=None
    )


class DataQualityMetricConfigInput(BaseModel):
    metric: DataQualityMetric
    enabled: bool
    normalize: bool
    threshold: Optional["ThresholdRefInput"] = None


class DataSourceDataInput(BaseModel):
    id: str
    storage_info: "StorageInput" = Field(alias="storageInfo")


class DeleteDataSourceInput(BaseModel):
    id: str


class EditApplicationSettingsInput(BaseModel):
    usage_statistics: bool = Field(alias="usageStatistics")


class EditModelInput(BaseModel):
    model_id: str = Field(alias="modelId")
    allow_invalidating_results: bool = Field(
        alias="allowInvalidatingResults", default=False
    )
    name: Optional[str] = None
    reference_start_timestamp: Optional[Any] = Field(
        alias="referenceStartTimestamp", default=None
    )
    reference_end_timestamp: Optional[Any] = Field(
        alias="referenceEndTimestamp", default=None
    )
    runtime_config: Optional["EditRuntimeConfigInput"] = Field(
        alias="runtimeConfig", default=None
    )
    schedules: Optional[List["EditScheduleInput"]] = None


class EditRuntimeConfigInput(BaseModel):
    data_chunking: Optional[List["ChunkingConfigInput"]] = Field(
        alias="dataChunking", default=None
    )
    performance_types: Optional[List["PerformanceTypeConfigInput"]] = Field(
        alias="performanceTypes", default=None
    )
    performance_metrics: Optional[List["PerformanceMetricConfigInput"]] = Field(
        alias="performanceMetrics", default=None
    )
    univariate_drift_methods: Optional[
        List["UnivariateDriftMethodConfigInput"]
    ] = Field(alias="univariateDriftMethods", default=None)
    multivariate_drift_methods: Optional[
        List["MultivariateDriftMethodConfigInput"]
    ] = Field(alias="multivariateDriftMethods", default=None)
    data_quality_metrics: Optional[List["DataQualityMetricConfigInput"]] = Field(
        alias="dataQualityMetrics", default=None
    )
    concept_shift_metrics: Optional[List["ConceptShiftMetricConfigInput"]] = Field(
        alias="conceptShiftMetrics", default=None
    )


class EditScheduleInput(BaseModel):
    frequency: ScheduleFrequency
    multiplier: int
    time: Any
    offset_days: Optional[int] = Field(alias="offsetDays", default=None)
    day_of_week: Optional[DayOfWeek] = Field(alias="dayOfWeek", default=None)


class EditTagInput(BaseModel):
    original_name: str = Field(alias="originalName")
    name: str


class EditUserNotificationSettingsInput(BaseModel):
    user_id: Optional[str] = Field(alias="userId", default=None)
    email_enabled: bool = Field(alias="emailEnabled")
    email_recipient: Optional[str] = Field(alias="emailRecipient", default=None)


class InspectDataSourceInput(BaseModel):
    problem_type: ProblemType = Field(alias="problemType")
    storage_info: "StorageInput" = Field(alias="storageInfo")


class MultivariateDriftMethodConfigInput(BaseModel):
    method: MultivariateDriftMethod
    enabled: bool
    threshold: Optional["ThresholdRefInput"] = None


class PerformanceMetricConfigInput(BaseModel):
    metric: PerformanceMetric
    enabled: bool
    enabled_estimated: bool = Field(alias="enabledEstimated")
    enabled_realized: bool = Field(alias="enabledRealized")
    threshold: Optional["ThresholdRefInput"] = None
    business_value: Optional["BusinessValueMetricConfigInput"] = Field(
        alias="businessValue", default=None
    )


class PerformanceTypeConfigInput(BaseModel):
    type: PerformanceType
    enabled: bool


class RawStorageInput(BaseModel):
    connection_string: str = Field(alias="connectionString")
    options: Optional[Any] = None


class S3StorageInput(BaseModel):
    uri: str
    authentication_mode: S3AuthenticationMode = Field(alias="authenticationMode")
    aws_access_key_id: Optional[str] = Field(alias="awsAccessKeyId", default=None)
    aws_secret_access_key: Optional[str] = Field(
        alias="awsSecretAccessKey", default=None
    )


class StandardDeviationThresholdInput(BaseModel):
    std_lower_multiplier: Optional[float] = Field(
        alias="stdLowerMultiplier", default=None
    )
    std_upper_multiplier: Optional[float] = Field(
        alias="stdUpperMultiplier", default=None
    )


class StorageInput(BaseModel):
    raw: Optional["RawStorageInput"] = None
    azure_blob: Optional["AzureBlobStorageInput"] = Field(
        alias="azureBlob", default=None
    )
    s3: Optional["S3StorageInput"] = None
    cache: Optional["CacheStorageInput"] = None


class TagResultInput(BaseModel):
    analysis_type: AnalysisType = Field(alias="analysisType")
    metric_name: str = Field(alias="metricName")
    component_name: Optional[str] = Field(alias="componentName", default=None)
    column_name: Optional[str] = Field(alias="columnName", default=None)
    column_names: Optional[List[str]] = Field(alias="columnNames", default=None)
    model_id: int = Field(alias="modelId")
    tag_name: str = Field(alias="tagName")


class ThresholdRefInput(BaseModel):
    id: str


class UnivariateDriftMethodConfigInput(BaseModel):
    method: UnivariateDriftMethod
    enabled: bool
    enabled_categorical: bool = Field(alias="enabledCategorical")
    enabled_continuous: bool = Field(alias="enabledContinuous")
    threshold: Optional["ThresholdRefInput"] = None


class UserApiTokenCreateInput(BaseModel):
    description: Optional[str] = None


AddDataSourceToModelInput.model_rebuild()
AzureBlobStorageInput.model_rebuild()
BusinessValueMetricConfigInput.model_rebuild()
CacheStorageInput.model_rebuild()
ChunkingConfigInput.model_rebuild()
ColumnInput.model_rebuild()
ConceptShiftMetricConfigInput.model_rebuild()
ConstantThresholdInput.model_rebuild()
CreateDataSourceInput.model_rebuild()
CreateModelInput.model_rebuild()
CreateTagInput.model_rebuild()
CreateThresholdInput.model_rebuild()
DataQualityMetricConfigInput.model_rebuild()
DataSourceDataInput.model_rebuild()
DeleteDataSourceInput.model_rebuild()
EditApplicationSettingsInput.model_rebuild()
EditModelInput.model_rebuild()
EditRuntimeConfigInput.model_rebuild()
EditScheduleInput.model_rebuild()
EditTagInput.model_rebuild()
EditUserNotificationSettingsInput.model_rebuild()
InspectDataSourceInput.model_rebuild()
MultivariateDriftMethodConfigInput.model_rebuild()
PerformanceMetricConfigInput.model_rebuild()
PerformanceTypeConfigInput.model_rebuild()
RawStorageInput.model_rebuild()
S3StorageInput.model_rebuild()
StandardDeviationThresholdInput.model_rebuild()
StorageInput.model_rebuild()
TagResultInput.model_rebuild()
ThresholdRefInput.model_rebuild()
UnivariateDriftMethodConfigInput.model_rebuild()
UserApiTokenCreateInput.model_rebuild()
