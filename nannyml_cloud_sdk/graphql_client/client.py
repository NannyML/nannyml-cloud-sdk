# Generated by ariadne-codegen on 2023-11-02 15:40
# Source: graphql/queries

from typing import Dict

from .base_client import BaseClient
from .base_model import Upload
from .input_types import InspectDataSourceInput
from .inspect_schema import InspectSchema
from .list_models import ListModels
from .upload_dataset import UploadDataset


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def inspect_schema(self, input: InspectDataSourceInput) -> InspectSchema:
        query = gql(
            """
            query InspectSchema($input: InspectDataSourceInput!) {
              inspect_dataset(input: $input) {
                columns {
                  name
                  columnType
                  dataType
                  className
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return InspectSchema.model_validate(data)

    def list_models(self) -> ListModels:
        query = gql(
            """
            query ListModels {
              models {
                id
                name
                problemType
                createdAt
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return ListModels.model_validate(data)

    def upload_dataset(self, file: Upload) -> UploadDataset:
        query = gql(
            """
            mutation UploadDataset($file: Upload!) {
              upload_dataset(file: $file) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {"file": file}
        response = self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return UploadDataset.model_validate(data)
